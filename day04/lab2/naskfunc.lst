     1                                  ;naskfunc,用汇编实现HALT(HLT)
     2                                  ;TAB = 4 
     3                                  
     4                                  ; [FORMAT"WCOFF"]                     ;制作目标文件的模式,创建对象文件的模式；在NASM中出错，因此删除该行
     5                                  [BITS 32]                           ;制作32位模式用的机器语言
     6                                  
     7                                  ;制作目标文件的信息
     8                                  
     9                                  ;[FIEL"naskfunc.nas"]               ;源文件名信息
    10                                  ; GLOBAL _io_hlt                    nasm中出错,修正
    11                                  ; GLOBAL io_hlt,write_mem8	        ;程序中包含的函数名,需以下划线开头.注意要在函数名的前面加上“_”，否则就不能很好地与C语言函数链接。需要链接的函数名，都要用GLOBAL1指令声明。
    12                                  GLOBAL io_hlt,io_cli,io_sti,io_stihlt
    13                                  GLOBAL io_in8,io_in16,io_in32
    14                                  GLOBAL io_out8,io_out16,io_out32
    15                                  GLOBAL io_load_eflags,io_store_eflags
    16                                  [SECTION .text]                     ;目标文件中写了这些之后再写程序
    17                                  
    18                                  ;_io_hlt:	; void io_hlt(void);    nasm中出错,修正
    19                                  io_hlt:    ;void io_hlt(void);  停止CPU函数
    20                                  
    21 00000000 F4                          HLT
    22 00000001 C3                          RET     ;RET:Return缩写
    23                                  
    24                                  io_cli:     ;void io_cli(void);  关中断
    25 00000002 FA                          CLI
    26 00000003 C3                          RET
    27                                  
    28                                  io_sti:     ;void io_sti(void);  开中断
    29 00000004 FB                          STI
    30 00000005 C3                          RET
    31                                  io_stihlt:  ;void io_stihlt(void); 
    32 00000006 FB                          STI
    33 00000007 F4                          HLT
    34 00000008 C3                          RET
    35                                  io_in8:     ;int io_in8(int port);
    36 00000009 8B542404                    MOV     EDX,[ESP+4]     ;port
    37 0000000D B800000000                  MOV     EAX,0
    38 00000012 EC                          IN      AL,DX           ;IN input from port(存在DX中)
    39 00000013 C3                          RET
    40                                  io_in16:     ;int io_in16(int port);
    41 00000014 8B542404                    MOV     EDX,[ESP+4]     ;port
    42 00000018 B800000000                  MOV     EAX,0
    43 0000001D EC                          IN      AL,DX
    44 0000001E C3                          RET
    45                                  io_in32:     ;int io_in32(int port);
    46 0000001F 8B542404                    MOV     EDX,[ESP+4]     ;port
    47 00000023 ED                          IN      EAX,DX           
    48 00000024 C3                          RET
    49                                  io_out8:    ;void io_out8(int port,int data);
    50 00000025 8B542404                    MOV     EDX,[ESP+4]     ;port
    51 00000029 8A442408                    MOV     AL,[ESP+8]      ;data
    52 0000002D EE                          OUT     DX,AL
    53 0000002E C3                          RET
    54                                  io_out16:    ;void io_out16(int port,int data);
    55 0000002F 8B542404                    MOV     EDX,[ESP+4]     ;port
    56 00000033 8A442408                    MOV     AL,[ESP+8]      ;data
    57 00000037 EE                          OUT     DX,AL
    58 00000038 C3                          RET
    59                                  io_out32:    ;void io_out32(int port,int data);
    60 00000039 8B542404                    MOV     EDX,[ESP+4]     ;port
    61 0000003D 8A442408                    MOV     AL,[ESP+8]      ;data
    62 00000041 EF                          OUT     DX,EAX
    63 00000042 C3                          RET    
    64                                  
    65                                  
    66                                  
    67                                  ;介绍一下EFLAGS这一特别的寄存器。这是由名为FLAGS的16位寄存器扩展而来的32位寄存器。
    68                                  ;FLAGS是存储进位标志和中断标志等标志的寄存器。进位标志可以通过JC或JNC等跳转指令来
    69                                  ;简单地判断到底是0还是1。但对于中断标志，没有类似的JI或JNI命令，所以只能读入EFLAGS，
    70                                  ;再检查第9位是0还是1。顺便说一下，进位标志是EFLAGS的第0位。
    71                                  io_load_eflags: ;int io_load_elfags(void);
    72 00000043 9C                          PUSHFD      ;指PUSH EFLAGS
    73 00000044 58                          POP     EAX
    74 00000045 C3                          RET
    75                                  io_store_eflags:    ;void io_store_eflags(int eflags);
    76 00000046 8B442404                    MOV     EAX,[ESP+4]
    77 0000004A 50                          PUSH  EAX
    78 0000004B 9D                          POPFD           ;指POP EFLAGS
    79 0000004C C3                          RET
    80                                  
    81                                  
    82                                  
    83                                  ; write_mem8:                         ;void write_mem8(int addr,int data);
    84                                  ;     MOV     ECX,[ESP+4]             ;[ESP+4]中存放的是地址,将其读入ECX
    85                                  ;     MOV     AL,[ESP+8]              ;[ESP+8]存放的是数据,将其读入AL
    86                                  ;     MOV     [ECX],AL
    87                                  ;     RET
