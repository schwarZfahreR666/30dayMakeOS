     1                                  ; naskfunc
     2                                  ; TAB=4
     3                                  
     4                                  ;[FORMAT "WCOFF"]				; 制作目标文件的模式	
     5                                  ;[INSTRSET "i486p"]				; 使用到486为止的指令
     6                                  [BITS 32]						; 3制作32位模式用的机器语言
     7                                  
     8                                  
     9                                  	GLOBAL io_hlt,io_cli,io_sti,io_stihlt
    10                                  	GLOBAL io_in8,io_in16,io_in32
    11                                  	GLOBAL io_out8,io_out16,io_out32
    12                                  	GLOBAL io_load_eflags,io_store_eflags
    13                                  	GLOBAL	load_gdtr, load_idtr
    14                                  	GLOBAL	asm_inthandler20, asm_inthandler21, asm_inthandler27, asm_inthandler2c
    15                                  	GLOBAL	load_cr0, store_cr0
    16                                  	GLOBAL	memtest_sub_asm
    17                                  	EXTERN	inthandler20, inthandler21, inthandler27, inthandler2c
    18                                  
    19                                  [SECTION .text]
    20                                  
    21                                  io_hlt:	; void io_hlt(void);
    22 00000000 F4                      		HLT
    23 00000001 C3                      		RET
    24                                  
    25                                  io_cli:	; void io_cli(void);
    26 00000002 FA                      		CLI
    27 00000003 C3                      		RET
    28                                  
    29                                  io_sti:	; void io_sti(void);
    30 00000004 FB                      		STI
    31 00000005 C3                      		RET
    32                                  
    33                                  io_stihlt:	; void io_stihlt(void);
    34 00000006 FB                      		STI
    35 00000007 F4                      		HLT
    36 00000008 C3                      		RET
    37                                  
    38                                  io_in8:	; int io_in8(int port);
    39 00000009 8B542404                		MOV		EDX,[ESP+4]		; port
    40 0000000D B800000000              		MOV		EAX,0
    41 00000012 EC                      		IN		AL,DX
    42 00000013 C3                      		RET
    43                                  
    44                                  io_in16:	; int io_in16(int port);
    45 00000014 8B542404                		MOV		EDX,[ESP+4]		; port
    46 00000018 B800000000              		MOV		EAX,0
    47 0000001D 66ED                    		IN		AX,DX
    48 0000001F C3                      		RET
    49                                  
    50                                  io_in32:	; int io_in32(int port);
    51 00000020 8B542404                		MOV		EDX,[ESP+4]		; port
    52 00000024 ED                      		IN		EAX,DX
    53 00000025 C3                      		RET
    54                                  
    55                                  io_out8:	; void io_out8(int port, int data);
    56 00000026 8B542404                		MOV		EDX,[ESP+4]		; port
    57 0000002A 8A442408                		MOV		AL,[ESP+8]		; data
    58 0000002E EE                      		OUT		DX,AL
    59 0000002F C3                      		RET
    60                                  
    61                                  io_out16:	; void io_out16(int port, int data);
    62 00000030 8B542404                		MOV		EDX,[ESP+4]		; port
    63 00000034 8B442408                		MOV		EAX,[ESP+8]		; data
    64 00000038 66EF                    		OUT		DX,AX
    65 0000003A C3                      		RET
    66                                  
    67                                  io_out32:	; void io_out32(int port, int data);
    68 0000003B 8B542404                		MOV		EDX,[ESP+4]		; port
    69 0000003F 8B442408                		MOV		EAX,[ESP+8]		; data
    70 00000043 EF                      		OUT		DX,EAX
    71 00000044 C3                      		RET
    72                                  
    73                                  io_load_eflags:	; int io_load_eflags(void);
    74 00000045 9C                      		PUSHFD		; PUSH EFLAGS 
    75 00000046 58                      		POP		EAX
    76 00000047 C3                      		RET
    77                                  
    78                                  io_store_eflags:	; void io_store_eflags(int eflags);
    79 00000048 8B442404                		MOV		EAX,[ESP+4]
    80 0000004C 50                      		PUSH	EAX
    81 0000004D 9D                      		POPFD		; POP EFLAGS 
    82 0000004E C3                      		RET
    83                                  ;GDTR是一个很特别的48位寄存器，并不能用我们常用的MOV指令来赋值。
    84                                  ;给它赋值的时候，唯一的方法就 是指定一个内存地址，从指定的地址读取
    85                                  ;6个字节（也就是48位），然后赋值给GDTR寄存器。
    86                                  ;该寄存器的低16位（即内存的最初2个字节）是段上限，
    87                                  ;它等于“GDT的有效字节数-1”。
    88                                  ;剩下的高32 位（即剩余的4个字节），代表GDT的开始地址。
    89                                  load_gdtr:		; void load_gdtr(int limit, int addr);
    90 0000004F 668B442404              		MOV		AX,[ESP+4]		; limit
    91 00000054 6689442406              		MOV		[ESP+6],AX
    92 00000059 0F01542406              		LGDT	[ESP+6]
    93 0000005E C3                      		RET
    94                                  
    95                                  load_idtr:		; void load_idtr(int limit, int addr);
    96 0000005F 668B442404              		MOV		AX,[ESP+4]		; limit
    97 00000064 6689442406              		MOV		[ESP+6],AX
    98 00000069 0F015C2406              		LIDT	[ESP+6]
    99 0000006E C3                      		RET
   100                                  
   101                                  asm_inthandler20:
   102 0000006F 06                      		PUSH	ES
   103 00000070 1E                      		PUSH	DS
   104 00000071 60                      		PUSHAD
   105 00000072 89E0                    		MOV		EAX,ESP
   106 00000074 50                      		PUSH	EAX
   107 00000075 668CD0                  		MOV		AX,SS
   108 00000078 8ED8                    		MOV		DS,AX
   109 0000007A 8EC0                    		MOV		ES,AX
   110 0000007C E8(00000000)            		CALL	inthandler20
   111 00000081 58                      		POP		EAX
   112 00000082 61                      		POPAD
   113 00000083 1F                      		POP		DS
   114 00000084 07                      		POP		ES
   115 00000085 CF                      		IRETD
   116                                  
   117                                  asm_inthandler21:
   118 00000086 06                      		PUSH	ES
   119 00000087 1E                      		PUSH	DS
   120 00000088 60                      		PUSHAD
   121 00000089 89E0                    		MOV		EAX,ESP
   122 0000008B 50                      		PUSH	EAX
   123 0000008C 668CD0                  		MOV		AX,SS
   124 0000008F 8ED8                    		MOV		DS,AX
   125 00000091 8EC0                    		MOV		ES,AX
   126 00000093 E8(00000000)            		CALL	inthandler21
   127 00000098 58                      		POP		EAX
   128 00000099 61                      		POPAD
   129 0000009A 1F                      		POP		DS
   130 0000009B 07                      		POP		ES
   131 0000009C CF                      		IRETD
   132                                  
   133                                  asm_inthandler27:
   134 0000009D 06                      		PUSH	ES
   135 0000009E 1E                      		PUSH	DS
   136 0000009F 60                      		PUSHAD
   137 000000A0 89E0                    		MOV		EAX,ESP
   138 000000A2 50                      		PUSH	EAX
   139 000000A3 668CD0                  		MOV		AX,SS
   140 000000A6 8ED8                    		MOV		DS,AX
   141 000000A8 8EC0                    		MOV		ES,AX
   142 000000AA E8(00000000)            		CALL	inthandler27
   143 000000AF 58                      		POP		EAX
   144 000000B0 61                      		POPAD
   145 000000B1 1F                      		POP		DS
   146 000000B2 07                      		POP		ES
   147 000000B3 CF                      		IRETD
   148                                  
   149                                  asm_inthandler2c:
   150 000000B4 06                      		PUSH	ES
   151 000000B5 1E                      		PUSH	DS
   152 000000B6 60                      		PUSHAD
   153 000000B7 89E0                    		MOV		EAX,ESP
   154 000000B9 50                      		PUSH	EAX
   155 000000BA 668CD0                  		MOV		AX,SS
   156 000000BD 8ED8                    		MOV		DS,AX
   157 000000BF 8EC0                    		MOV		ES,AX
   158 000000C1 E8(00000000)            		CALL	inthandler2c
   159 000000C6 58                      		POP		EAX
   160 000000C7 61                      		POPAD
   161 000000C8 1F                      		POP		DS
   162 000000C9 07                      		POP		ES
   163 000000CA CF                      		IRETD
   164                                  
   165                                  load_cr0:		; int load_cr0(void);
   166 000000CB 0F20C0                  		MOV		EAX,CR0
   167 000000CE C3                      		RET
   168                                  
   169                                  store_cr0:		; void store_cr0(int cr0);
   170 000000CF 8B442404                		MOV		EAX,[ESP+4]
   171 000000D3 0F22C0                  		MOV		CR0,EAX
   172 000000D6 C3                      		RET
   173                                  
   174                                  memtest_sub_asm:	; unsigned int memtest_sub(unsigned int start, unsigned int end)
   175 000000D7 57                      		PUSH	EDI						; �iEBX, ESI, EDI ���g�������̂Łj
   176 000000D8 56                      		PUSH	ESI
   177 000000D9 53                      		PUSH	EBX
   178 000000DA BE55AA55AA              		MOV		ESI,0xaa55aa55			; pat0 = 0xaa55aa55;
   179 000000DF BFAA55AA55              		MOV		EDI,0x55aa55aa			; pat1 = 0x55aa55aa;
   180 000000E4 8B442410                		MOV		EAX,[ESP+12+4]			; i = start;
   181                                  mts_loop:
   182 000000E8 89C3                    		MOV		EBX,EAX
   183 000000EA 81C3FC0F0000            		ADD		EBX,0xffc				; p = i + 0xffc;
   184 000000F0 8B13                    		MOV		EDX,[EBX]				; old = *p;
   185 000000F2 8933                    		MOV		[EBX],ESI				; *p = pat0;
   186 000000F4 8333FF                  		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   187 000000F7 3B3B                    		CMP		EDI,[EBX]				; if (*p != pat1) goto fin;
   188 000000F9 7518                    		JNE		mts_fin
   189 000000FB 8333FF                  		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   190 000000FE 3B33                    		CMP		ESI,[EBX]				; if (*p != pat0) goto fin;
   191 00000100 7511                    		JNE		mts_fin
   192 00000102 8913                    		MOV		[EBX],EDX				; *p = old;
   193 00000104 0500100000              		ADD		EAX,0x1000				; i += 0x1000;
   194 00000109 3B442414                		CMP		EAX,[ESP+12+8]			; if (i <= end) goto mts_loop;
   195 0000010D 76D9                    		JBE		mts_loop
   196 0000010F 5B                      		POP		EBX
   197 00000110 5E                      		POP		ESI
   198 00000111 5F                      		POP		EDI
   199 00000112 C3                      		RET
   200                                  mts_fin:
   201 00000113 8913                    		MOV		[EBX],EDX				; *p = old;
   202 00000115 5B                      		POP		EBX
   203 00000116 5E                      		POP		ESI
   204 00000117 5F                      		POP		EDI
   205 00000118 C3                      		RET
